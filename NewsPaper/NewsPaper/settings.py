"""
Django settings for NewsPaper project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-*#_ww5t4ciqt!kecvh#f$ltq@yax$ou!jn^kc3_o&dey(9ybs7'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_filters',
    'django.contrib.sites',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # ... include the providers you want to enable:
    'allauth.socialaccount.providers.google',

    'django_apscheduler',

    'news.apps.NewsConfig',
    'accounts.apps.AccountsConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'NewsPaper.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # `allauth` needs this from django
                'django.template.context_processors.request',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [

    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

WSGI_APPLICATION = 'NewsPaper.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = '/news/'

LOGOUT_REDIRECT_URL = '/news/'

LOGIN_URL = '/accounts/login/'

SITE_ID = 1

# --------------- настройка приложения allauth -------------------------

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'

ACCOUNT_FORMS = {'signup': 'accounts.forms.BasicSignupForm'}

EMAIL_HOST = 'smtp.yandex.ru' 
EMAIL_PORT = 465
EMAIL_HOST_USER = 'shagi80'
EMAIL_HOST_PASSWORD = config('EMAIL_PASSWORD')
EMAIL_USE_SSL = True

DEFAULT_FROM_EMAIL = EMAIL_HOST_USER + '@yandex.ru'
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_EMAIL_SUBJECT_PREFIX = 'NewsPaper'

#ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = '/news/'

# --------------- настройка приложения django-apscheduler -------------------------

# формат даты, которую будет воспринимать наш задачник(вспоминаем урок по фильтрам) 
APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"
 
# если задача не выполняется за 25 секунд, то она автоматически снимается, можете поставить время побольше, но как правило, это сильно бьёт по производительности сервера
APSCHEDULER_RUN_NOW_TIMEOUT = 25  # Seconds

# ----------------------- настройка кэширования -------------------------------------

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'), 
    }
}


# ----------------------- логирование -------------------------------------

LOGS_DIR = os.path.join(BASE_DIR, 'logs')

ADMINS = [('shagi80', 'shagi80@mail.ru'),]

SERVER_EMAIL = 'shagi80@yandex.ru'


def debug_and_info_filter(record):
    """ фильтр логов DEBUG и INFO  """
    return record.levelname == 'DEBUG' or record.levelname == 'INFO'


def warning_filter(record):
    """ фильтр логов WARNING """
    return record.levelname == 'WARNING'


def error_and_critical_filter(record):
    """ фильтр ловго ERROR и CRITICAL """
    return record.levelname == 'ERROR' or record.levelname == 'CRITICAL'


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    'formatters': {
        'simple': {
            'format': '{asctime} {levelname} {message}',
            'style': '{'
        },
        'pathname': {
            'format': '{asctime} {levelname} {message} {pathname}',
            'style': '{'
        },
        'exc_info': {
            'format': '{asctime} {levelname} {message} {pathname} {exc_info}',
            'style': '{' 
        },
        'module': {
            'format': '{asctime} {levelname} {module} {message}',
            'style': '{' 
        },
    },

    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'debug_and_info': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': debug_and_info_filter,    
        },   
        'warning': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': warning_filter,    
        },     
        'error_and_critical': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': error_and_critical_filter,    
        },
    },

    'handlers': {
        'console_DEBUG_INFO': {
            'filters': ['require_debug_true', 'debug_and_info'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'console_WARNING': {
            'filters': ['require_debug_true', 'warning'],
            'class': 'logging.StreamHandler',
            'formatter': 'pathname'
        },
        'console_ERROR_CRITICAL': {
            'filters': ['require_debug_true', 'error_and_critical'],
            'class': 'logging.StreamHandler',
            'formatter': 'exc_info'
        },
        'file_INFO': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename' : os.path.join(LOGS_DIR, 'general.log'),
            'filters': ['require_debug_false',],
            'formatter': 'module'
        },
        'file_ERROR_and_CRITICAL': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename' : os.path.join(LOGS_DIR, 'errors.log'),
            'filters': ['require_debug_false',],
            'formatter': 'exc_info'
        },
        'file_SECURITY': {
            'class': 'logging.FileHandler',
            'filename' : os.path.join(LOGS_DIR, 'security.log'),
            'filters': ['require_debug_false',],
            'formatter': 'module'
        },
        'mail_ERROR': {
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
            'level': 'ERROR',
            'formatter': 'pathname'
        },
    },

    'loggers': {      
        'django': {
            'handlers': ['console_DEBUG_INFO', 'console_WARNING', 'console_ERROR_CRITICAL', 'file_INFO',],        
        },
        'django.request': {
            'handlers': ['file_ERROR_and_CRITICAL', 'mail_ERROR', ],     
        },
        'django.server': {
            'handlers': ['file_ERROR_and_CRITICAL', 'mail_ERROR'],   
        },
        'django.template': {
            'handlers': ['file_ERROR_and_CRITICAL',],   
        },
        'django.db_backends': {
            'handlers': ['file_ERROR_and_CRITICAL',],   
        },
        'django.security': {
            'handlers': ['file_SECURITY',],   
        },
    }
}

